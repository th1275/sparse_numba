name: Build and Test sparse_numba

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel cython numpy setuptools twine
          python -m pip install cibuildwheel

      # For macOS, create a temporary patch to setup.py to fix architecture issues
      - name: Patch setup.py for macOS architecture issues
        if: runner.os == 'macOS'
        run: |
          sed -i.bak 's/extra_compile_args.append("-arch arm64")/# Disabled for CI: extra_compile_args.append("-arch arm64")/' setup.py
          sed -i.bak 's/extra_link_args = \["-arch arm64"\]/extra_link_args = []/' setup.py
          sed -i.bak 's/extra_compile_args.append("-arch x86_64")/# Disabled for CI: extra_compile_args.append("-arch x86_64")/' setup.py
          sed -i.bak 's/extra_link_args = \["-arch x86_64"\]/extra_link_args = []/' setup.py

      # Linux specific setup
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsuitesparse-dev libsuperlu-dev libopenblas-dev

      # macOS specific setup
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install suite-sparse superlu openblas

      # Build wheels
      - name: Build wheels
        env:
          CIBW_BUILD: 'cp38-* cp39-* cp310-* cp311-* cp312-*'
          CIBW_SKIP: '*-musllinux* pp*'
          CIBW_ARCHS_MACOS: 'x86_64'  # Simplified to just x86_64 for now
          CIBW_ARCHS_LINUX: 'x86_64'
          # Simplified Linux dependencies
          CIBW_BEFORE_ALL_LINUX: >
            yum install -y epel-release || true &&
            yum install -y openblas-devel || true &&
            yum install -y suitesparse-devel || true &&
            echo "Using system libraries where available"
          CIBW_ENVIRONMENT: "CFLAGS='-O3' CXXFLAGS='-O3'"
          # Modify environment to handle missing libraries
          CIBW_ENVIRONMENT_LINUX: >
            CFLAGS='-O3' 
            CXXFLAGS='-O3'
            SPARSE_NUMBA_IGNORE_MISSING_LIBS=1
          CIBW_ENVIRONMENT_MACOS: >
            CFLAGS='-O3' 
            CXXFLAGS='-O3'
            MACOSX_DEPLOYMENT_TARGET=10.9
            SYSTEM_VERSION_COMPAT=1
          # Test script for each wheel built
          CIBW_TEST_REQUIRES: "numpy scipy"
          CIBW_TEST_COMMAND: "python {project}/run_tests.py"
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      # Store the built wheels
      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: ./wheelhouse/*.whl

  # Functional testing
  test_functionality:
    needs: build_wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: ./wheelhouse

      # Install necessary system libraries for testing
      - name: Install Linux dependencies for testing
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsuitesparse-dev libsuperlu-dev libopenblas-dev

      - name: Install macOS dependencies for testing
        if: runner.os == 'macOS'
        run: |
          brew install suite-sparse superlu openblas || echo 'Dependencies might already be installed'

      # Install and test the wheel
      - name: Install and test wheel
        run: |
          python -m pip install --find-links=./wheelhouse sparse_numba
          python -m pip install numpy scipy
          python run_tests.py

  # Optional: Publish to PyPI when a tag is pushed
  upload_pypi:
    needs: [build_wheels, test_functionality]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: ./wheelhouse
          merge-multiple: true

      - name: Prepare distribution files
        run: |
          mkdir -p dist
          cp wheelhouse/*.whl dist/

      - name: Build source distribution
        run: |
          pip install build wheel
          python -m build --sdist

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*