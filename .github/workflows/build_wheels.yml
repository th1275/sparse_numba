name: Build and Test sparse_numba

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13]  # Changed to macos-13 for consistency
        # python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        python-version: ['3.11']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel cython numpy setuptools twine
          python -m pip install cibuildwheel

      # Linux specific setup
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsuitesparse-dev libopenblas-dev libsuperlu-dev
          # Check where SuperLU headers are located
          echo "SuperLU header locations:"
          sudo find /usr -name "slu_ddefs.h" | grep superlu
          # Create symlinks if necessary
          SUPERLU_HEADER=$(sudo find /usr -name "slu_ddefs.h" | grep superlu | head -n 1)
          if [ -n "$SUPERLU_HEADER" ]; then
            SUPERLU_DIR=$(dirname "$SUPERLU_HEADER")
            echo "Found SuperLU headers at: $SUPERLU_DIR"
            if [ ! -d "/usr/include/superlu" ]; then
              sudo mkdir -p /usr/include/superlu
              sudo cp "$SUPERLU_DIR"/*.h /usr/include/superlu/
              echo "Created SuperLU header symlinks in /usr/include/superlu/"
            fi
          fi

      # macOS specific setup
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install suite-sparse superlu openblas
          # Debug: Check the openblas library location
          export OPENBLAS_PREFIX=$(brew --prefix openblas)
          echo "OpenBLAS prefix: $OPENBLAS_PREFIX"
          echo "OpenBLAS library paths:"
          find $OPENBLAS_PREFIX -name "*.dylib"
          # Use the home directory for temporary symlinks (avoid permission issues)
          mkdir -p $HOME/homebrew_libs/openblas/lib
          ln -sf $OPENBLAS_PREFIX/lib/libopenblas.dylib $HOME/homebrew_libs/openblas/lib/
          echo "Created symlink in $HOME/homebrew_libs/openblas/lib/"
          echo "OPENBLAS_PREFIX=$OPENBLAS_PREFIX" >> $GITHUB_ENV
          echo "HOME_LIBS=$HOME/homebrew_libs" >> $GITHUB_ENV

      # Build wheels using cibuildwheel
      - name: Build wheels
        env:
#          CIBW_BUILD: 'cp38-* cp39-* cp310-* cp311-* cp312-*'
          CIBW_BUILD: 'cp311-*'
          CIBW_SKIP: '*-musllinux* pp*'
          # Add this to ensure extensions are built
          CIBW_BEFORE_BUILD: >
            pip install numpy cython
          # Make compilation more verbose to see errors
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ARCHS_MACOS: 'x86_64'  # Just x86_64 for CI builds
          CIBW_ARCHS_LINUX: 'x86_64'
          # Set CI flag for setup.py
          CIBW_ENVIRONMENT: >
            CI=true
            GITHUB_ACTIONS=true
            CFLAGS='-O3'
            CXXFLAGS='-O3'
          # macOS specific environment variables
          CIBW_ENVIRONMENT_MACOS: >
            CI=true
            GITHUB_ACTIONS=true
            CFLAGS='-O3'
            CXXFLAGS='-O3'
            MACOSX_DEPLOYMENT_TARGET=13.0
          # manylinux configuration - install required packages
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BEFORE_ALL_LINUX: |
            yum install -y epel-release || true
            yum install -y openblas-devel SuperLU-devel suitesparse-devel ||
            yum install -y openblas-devel superlu-devel suitesparse-devel ||
            (apt-get update && apt-get install -y libsuitesparse-dev libsuperlu-dev libopenblas-dev)
            
            # Check SuperLU header location
            find /usr -name "slu_ddefs.h" || echo "SuperLU headers not found"
            
            # If header is found, create a symlink in a standard location
            HEADER_PATH=$(find /usr -name "slu_ddefs.h" | head -1)
            if [ -n "$HEADER_PATH" ]; then
              HEADER_DIR=$(dirname "$HEADER_PATH")
              mkdir -p /tmp/superlu_include
              # Use a conditional copy to avoid errors when no headers match
              if [ -f "$HEADER_DIR/slu_ddefs.h" ]; then
                cp "$HEADER_DIR"/*.h /tmp/superlu_include/ 2>/dev/null || true
                echo "Copied SuperLU headers to /tmp/superlu_include/"
              fi
            fi
          CIBW_BEFORE_ALL_MACOS: >
            brew install suite-sparse superlu openblas;
            OPENBLAS_PREFIX=$(brew --prefix openblas);
            echo "OpenBLAS location: $OPENBLAS_PREFIX";
            mkdir -p $HOME/homebrew_libs/openblas/lib;
            ln -sf $OPENBLAS_PREFIX/lib/libopenblas.dylib $HOME/homebrew_libs/openblas/lib/;
            echo "Created symlink in $HOME/homebrew_libs/openblas/lib/"
          # Force wheel repair to use correct deployment target
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            MACOSX_DEPLOYMENT_TARGET=13.0 delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
          CIBW_TEST_REQUIRES: >
            numpy
            numba
            cython
          CIBW_TEST_COMMAND: >
            cd {project} && 
            python -c "import sys; print('Python version:', sys.version); print('sys.path:', sys.path)" &&
            python check_extensions.py &&
            python run_tests.py || 
            echo "Tests failed but continuing to build other wheels"
        run: |
          python -m cibuildwheel --output-dir wheelhouse

#      # Add this new step immediately after the Build wheels step
#      - name: Repair Linux wheels
#        if: runner.os == 'Linux'
#        run: |
#          echo "Repairing Linux wheels with auditwheel..."
#          pip install auditwheel
#          mkdir -p repaired_wheels
#          for whl in wheelhouse/sparse_numba-*-linux_x86_64.whl; do
#            if [ -f "$whl" ]; then
#              echo "Repairing wheel: $whl"
#              auditwheel repair "$whl" -w repaired_wheels/
#            else
#              echo "No Linux wheels found to repair"
#            fi
#          done
#
#          # List repaired wheels
#          echo "Repaired wheels:"
#          ls -la repaired_wheels/
#
#          # Replace original wheels with repaired ones
#          if [ "$(ls -A repaired_wheels/)" ]; then
#            echo "Replacing original wheels with repaired ones"
#            cp repaired_wheels/*.whl wheelhouse/
#          fi
#
#          # Final wheel listing
#          echo "Final wheelhouse contents:"
#          ls -la wheelhouse/
#
#      # For macOS, add a similar step with delocate
#      - name: Repair macOS wheels
#        if: runner.os == 'macOS'
#        run: |
#          echo "Repairing macOS wheels with delocate..."
#          pip install delocate
#          mkdir -p repaired_wheels
#          for whl in wheelhouse/sparse_numba-*-macosx_*.whl; do
#            if [ -f "$whl" ]; then
#              echo "Repairing wheel: $whl"
#              delocate-wheel -w repaired_wheels/ "$whl"
#            else
#              echo "No macOS wheels found to repair"
#            fi
#          done
#
#          # List repaired wheels
#          echo "Repaired wheels:"
#          ls -la repaired_wheels/
#
#          # Replace original wheels with repaired ones
#          if [ "$(ls -A repaired_wheels/)" ]; then
#            echo "Replacing original wheels with repaired ones"
#            cp repaired_wheels/*.whl wheelhouse/
#          fi
#
#          # Final wheel listing
#          echo "Final wheelhouse contents:"
#          ls -la wheelhouse/

      - name: Fix Permissions
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          find ./wheelhouse -name "*.so" -exec chmod +x {} \;
          find ./wheelhouse -name "*.so" -exec ls -la {} \;
#          find ./repaired_wheels -name "*.so" -exec chmod +x {} \;
#          find ./repaired_wheels -name "*.so" -exec ls -la {} \;

      # Store the built wheels
      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            ./wheelhouse/*.whl
#            ./repaired_wheels/*.whl

  # Test job that runs after the wheels are built
  test_installation:
    needs: build_wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
#          - os: ubuntu-latest
#            python-version: '3.8'
#            wheel-suffix: 'manylinux_2_17_x86_64.manylinux2014_x86_64'
#          - os: ubuntu-latest
#            python-version: '3.9'
#            wheel-suffix: 'manylinux_2_17_x86_64.manylinux2014_x86_64'
#          - os: ubuntu-latest
#            python-version: '3.10'
#            wheel-suffix: 'manylinux_2_17_x86_64.manylinux2014_x86_64'
          - os: ubuntu-latest
            python-version: '3.11'
            wheel-suffix: 'manylinux_2_17_x86_64.manylinux2014_x86_64'
#          - os: ubuntu-latest
#            python-version: '3.12'
#            wheel-suffix: 'manylinux_2_17_x86_64.manylinux2014_x86_64'
          # macOS x86_64
#          - os: macos-13  # This is x86_64
#            python-version: '3.8'
#            wheel-suffix: 'macosx_13_0_x86_64'  # Changed to match deployment target
#          - os: macos-13
#            python-version: '3.9'
#            wheel-suffix: 'macosx_13_0_x86_64'
#          - os: macos-13
#            python-version: '3.10'
#            wheel-suffix: 'macosx_13_0_x86_64'
          - os: macos-13
            python-version: '3.11'
            wheel-suffix: 'macosx_13_0_x86_64'
#          - os: macos-13
#            python-version: '3.12'
#            wheel-suffix: 'macosx_13_0_x86_64'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: ./wheelhouse

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsuitesparse-dev libopenblas-dev libsuperlu-dev

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install suite-sparse superlu openblas

      - name: Inspect wheel contents
        run: |
          python -m pip install wheel-inspect
          PYTHON_VERSION_NO_DOT=$(echo ${{ matrix.python-version }} | tr -d '.')
          WHEEL_FILE=$(ls wheelhouse/sparse_numba-*-cp${PYTHON_VERSION_NO_DOT}-*-${{ matrix.wheel-suffix }}.whl | head -n 1)
          python -m wheel_inspect $WHEEL_FILE
          unzip -l $WHEEL_FILE | grep "cy_.*wrapper"

      - name: Install the wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install numpy numba
          # List available wheels to debug
          echo "Available wheels:"
          ls -la wheelhouse/
          # Install the specific wheel for this platform/Python combination
          PYTHON_VERSION_NO_DOT=$(echo ${{ matrix.python-version }} | tr -d '.')
          WHEEL_FILE=$(ls wheelhouse/sparse_numba-*-cp${PYTHON_VERSION_NO_DOT}-*-${{ matrix.wheel-suffix }}.whl | head -n 1)
          
          if [ -z "$WHEEL_FILE" ]; then
            echo "Error: No matching wheel found for Python ${{ matrix.python-version }} and suffix ${{ matrix.wheel-suffix }}"
            exit 1
          fi
          echo "Installing wheel: $WHEEL_FILE"
          python -m pip install $WHEEL_FILE --verbose

      - name: Force extensions to correct locations after install
        run: |
          # Find the installed package location
          SITE_PACKAGES=$(python -c "import site; print(site.getsitepackages()[0])")
    
          # Create directories if they don't exist
          mkdir -p $SITE_PACKAGES/sparse_numba/sparse_superlu
          mkdir -p $SITE_PACKAGES/sparse_numba/sparse_umfpack
    
          # Find and copy the extension files from the wheel
          PYTHON_VERSION_NO_DOT=$(echo ${{ matrix.python-version }} | tr -d '.')
          WHEEL_FILE=$(ls wheelhouse/sparse_numba-*-cp${PYTHON_VERSION_NO_DOT}-*-${{ matrix.wheel-suffix }}.whl | head -n 1)
          TMP_DIR=$(mktemp -d)
          unzip -o $WHEEL_FILE -d $TMP_DIR
    
          # Copy extensions to the site-packages directory
          find $TMP_DIR -name "cy_*wrapper*.so" -exec cp {} $SITE_PACKAGES/sparse_numba/sparse_superlu/ \;
          find $TMP_DIR -name "cy_*wrapper*.so" -exec cp {} $SITE_PACKAGES/sparse_numba/sparse_umfpack/ \;
    
          # Check if files were copied
          ls -la $SITE_PACKAGES/sparse_numba/sparse_superlu/
          ls -la $SITE_PACKAGES/sparse_numba/sparse_umfpack/

#      - name: Run extension diagnostics
#        run: |
#          python dll_diagnosis.py

#      - name: Verify extensions
#        run: |
#          python -c "import importlib.util; import sys; ext1 = importlib.util.find_spec('sparse_numba.sparse_superlu.cy_superlu_wrapper'); ext2 = importlib.util.find_spec('sparse_numba.sparse_umfpack.cy_umfpack_wrapper'); print(f'SuperLU ext: {ext1 is not None}'); print(f'UMFPACK ext: {ext2 is not None}'); sys.exit(0 if ext1 and ext2 else 1)"

      - name: Run tests
        run: |
          python run_tests.py

  # Build source distribution (sdist) for PyPI
  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel cython numpy setuptools

      - name: Build source distribution
        run: |
          python -m build --sdist

      - name: Upload sdist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: ./dist/*.tar.gz

  # Publish to PyPI when a tag is pushed
  upload_pypi:
    needs: [build_wheels, build_sdist, test_installation]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: ./wheelhouse
          merge-multiple: true

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: ./dist

      - name: Prepare distribution files
        run: |
          mkdir -p final_dist
          cp wheelhouse/*.whl final_dist/
          cp dist/*.tar.gz final_dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: final_dist/